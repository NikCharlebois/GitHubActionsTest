name: Unit Tests
on: [push]

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as lpart of the jobf
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - name: Install Dependencies
      shell : powershell
      run: |
       [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12

       $manifest = Import-PowerShellDataFile "./Modules/Microsoft365DSC/Microsoft365DSC.psd1"
       $dependencies = $manifest.RequiredModules
       foreach ($dependency in $dependencies)
       {
           Install-Module $dependency.ModuleName -RequiredVersion $dependency.RequiredVersion -Force -SkipPublisherCheck -AllowClobber -Scope AllUsers
           try
           {
               Import-Module $dependency.ModuleName -Force
           }
           catch
           {
               Write-Verbose -Message $_
           }
       }
    - name: Pre-Setup
      shell : powershell
      run: |
        git clone https://github.com/PowerShell/DscResource.Tests       
        Import-Module -Name "./DscResource.Tests/AppVeyor.psm1"
        Invoke-AppveyorInstallTask
        $env:APPVEYOR_BUILD_FOLDER = Get-Location | select -ExpandProperty Path
        $env:APPVEYOR_BUILD_VERSION = "1.0.0"
        [System.Environment]::SetEnvironmentVariable('M365DSCTelemetryEnabled', $false, [System.EnvironmentVariableTarget]::Machine)
    - name: Run DSCResource.Tests
      shell: powershell
      run: |
        $moduleName = 'Microsoft365DSC'
        $mainModuleFolder = "Modules\$moduleName"
        Invoke-AppveyorTestScriptTask `
            -Type 'Harness' `
            -MainModulePath $mainModuleFolder `
            -CodeCovIo
    - name: Invoke TestHarness
      shell: powershell
      run: |
        Import-Module './Tests/TestHarness.psm1' -Force
        $results = Invoke-TestHarness 
        if ($results.FailedCount -gt 0)
        {
            throw "{$($results.FailedCount)} Unit Test(s) Failed"
        }
        $content = dir | Out-String
        $VerbosePreference = 'Continue'
        Write-Verbose -Message $content
        
        # Get the code coverage result from build worker test run.
        $entireCodeCoverage = $results.CodeCoverage

        # Check whether we run in a container, and the build worker reported coverage
        if ($testContainer.Count -gt 0)
        {
            # Loop thru each container result and add it to the main coverage.
            foreach ($currentContainer in $testContainer)
            {
                if ($entireCodeCoverage)
                {
                    # Concatenate the code coverage result from the container test run.
                    $containerCodeCoverage = $currentContainer.PesterResult.CodeCoverage
                    if ($containerCodeCoverage)
                    {
                        $entireCodeCoverage.NumberOfCommandsAnalyzed += $containerCodeCoverage.NumberOfCommandsAnalyzed
                        $entireCodeCoverage.NumberOfFilesAnalyzed += $containerCodeCoverage.NumberOfFilesAnalyzed
                        $entireCodeCoverage.NumberOfCommandsExecuted += $containerCodeCoverage.NumberOfCommandsExecuted
                        $entireCodeCoverage.NumberOfCommandsMissed += $containerCodeCoverage.NumberOfCommandsMissed
                        $entireCodeCoverage.MissedCommands += $containerCodeCoverage.MissedCommands
                        $entireCodeCoverage.HitCommands += $containerCodeCoverage.HitCommands
                        $entireCodeCoverage.AnalyzedFiles += $containerCodeCoverage.AnalyzedFiles
                    }
                }
                else
                {
                    # The container was the first to report code coverage.
                    $entireCodeCoverage = $currentContainer.PesterResult.CodeCoverage
                }
            }
        }

        if ($entireCodeCoverage)
        {
            Write-Info -Message 'Uploading CodeCoverage to CodeCov.io...'
            $jsonPath = Export-CodeCovIoJson -CodeCoverage $entireCodeCoverage -repoRoot $env:APPVEYOR_BUILD_FOLDER
            Invoke-UploadCoveCoveIoReport -Path $jsonPath
        }
        else
        {
            Write-Warning -Message 'Could not create CodeCov.io report because Pester results object did not contain a CodeCoverage object'
        }     
    - uses: actions/checkout@master
    - uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
